{"version":3,"sources":["webpack://frontend/./src/components/Alerts.js","webpack://frontend/./src/components/Dashboard.js"],"names":["Alerts","state","showAlert","timeout","getReactAlerts","array","map","e","index","variant","type","key","message","delay","wait","Promise","resolve","reject","setTimeout","props","then","res","setState","messages","prevProps","prevState","this","prevMessages","length","Component","Dashboard","uploadFile","clearDB","websocket","ws","status","downloadFormat","downloadUrl","uploadUrl","getDownloadUrl","setWebsocketStatus","checkWebsocket","readyState","WebSocket","CLOSED","connectWebsocket","connectInterval","self","ws_scheme","window","location","protocol","url","host","onopen","clearTimeout","onmessage","evt","data","JSON","parse","onclose","Math","min","onerror","console","log","selectFormat","target","value","selectFileToUpload","input","document","createElement","onchange","file","files","click","sendFile","reader","FileReader","readAsText","onload","readerEvent","content","result","send","stringify","cleardb","className","name","onChange","id","readOnly","onClick","disabled","as","action","method"],"mappings":"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","file":"812.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Alert as ReactAlert } from \"react-bootstrap\";\n\nexport default class Alerts extends Component {\n  state = {\n    showAlert: false,\n    timeout: 5000,\n  };\n\n  componentDidUpdate(prevProps, prevState) {\n    let showAlert = false;\n    const { messages } = this.props;\n    const { messages: prevMessages } = prevProps;\n    // console.log(\"messages\", messages);\n    // console.log(\"errors\", errors);\n    // console.log(\"prevMessages\", prevMessages);\n    // console.log(\"prevErrors\", prevErrors);\n\n    if (messages && messages.length > 0 && messages !== prevMessages) {\n      showAlert = true;\n    }\n    // console.log(\"Alerts componentDidUpdate showAlert\", showAlert);\n    // console.log(\n    //   \"Alerts componentDidUpdate prevSate.showAlert\",\n    //   prevState.showAlert\n    // );\n    // console.log(\n    //   \"Alerts componentDidUpdate this.state.showAlert\",\n    //   this.state.showAlert\n    // );\n    if (showAlert && !this.state.showAlert) {\n      this.setState({\n        showAlert,\n      });\n    }\n  }\n\n  getReactAlerts = (array) => {\n    return array ? (\n      array.map((e, index) => {\n        const variant = e.type === \"success\" ? \"primary\" : \"danger\";\n        return (\n          <ReactAlert variant={variant} key={index}>\n            {e.message}\n          </ReactAlert>\n        );\n      })\n    ) : (\n      <></>\n    );\n  };\n\n  delay = (wait) =>\n    new Promise((resolve, reject) => {\n      setTimeout(() => resolve(), wait);\n    });\n\n  showAlert = () => {\n    if (this.state.showAlert) {\n      this.delay(\n        this.props.timeout ? this.props.timeout : this.state.timeout\n      ).then((res) =>\n        this.setState({\n          showAlert: false,\n        })\n      );\n      return <>{this.getReactAlerts(this.props.messages)}</>;\n    }\n    return <div />;\n  };\n\n  render() {\n    return <>{this.showAlert()}</>;\n  }\n}\n","import React, { Component } from \"react\";\nimport { Form, Button, Row, Card } from \"react-bootstrap\";\nimport Alerts from \"./Alerts\";\n\nexport default class Dashboard extends Component {\n  state = {\n    messages: [],\n    uploadFile: null,\n    clearDB: false,\n    websocket: {\n      ws: null,\n      status: \"disconnected\",\n    },\n    downloadFormat: \"json\",\n  };\n\n  downloadUrl = \"/testforjob/api/download/\";\n  uploadUrl = \"/testforjob/ws/upload/\";\n\n  getDownloadUrl = () => {\n    return `/testforjob/api/download_${this.state.downloadFormat}/`;\n  };\n\n  setWebsocketStatus = (status) => {\n    const websocket = { ...this.state.websocket, status: status };\n    //console.log(\"setWebsocketStatus\", websocket);\n    this.setState({ websocket });\n  };\n\n  checkWebsocket = () => {\n    const ws = this.state.websocket.ws;\n    if (!ws || ws.readyState === WebSocket.CLOSED) this.connectWebsocket(); //check if websocket instance is closed, if so call `connect` function.\n  };\n\n  connectWebsocket = () => {\n    const self = this; // cache the this\n    let connectInterval;\n    const ws_scheme = window.location.protocol === \"https:\" ? \"wss\" : \"ws\";\n    const url = `${ws_scheme}://${window.location.host}${this.uploadUrl}`;\n    const ws = new WebSocket(url);\n    ws.onopen = () => {\n      self.timeout = 250; // reset timer to 250 on open of websocket connection\n      clearTimeout(connectInterval);\n      //console.log(`connected to ${url}`);\n      this.setWebsocketStatus(`connected to ${url}`);\n    };\n\n    ws.onmessage = (evt) => {\n      // listen to data sent from the websocket server\n      const data = JSON.parse(evt.data);\n      this.setState({\n        messages: data ? [data] : [],\n      });\n    };\n\n    ws.onclose = () => {\n      //console.log('disconnected');\n      this.setWebsocketStatus(\"disconnected\");\n      // automatically try to reconnect on connection loss\n      self.timeout = self.timeout + self.timeout; //increment retry interval\n      connectInterval = setTimeout(\n        this.checkWebsocket,\n        Math.min(10000, self.timeout)\n      ); //call check function after timeout\n    };\n\n    ws.onerror = (e) => {\n      console.log(\"websocket error\", e);\n      this.setWebsocketStatus(`websocket error: ${e}`);\n    };\n    //console.log('Dashboard componentDidMount', ws);\n    const websocket = { ...this.state.websocket, ws: ws };\n    //console.log('set ws', websocket);\n    this.setState({ websocket });\n  };\n\n  componentDidMount() {\n    this.connectWebsocket();\n  }\n\n  selectFormat = (e) => {\n    //console.log('selectFormat', e.target.value);\n    this.setState({ downloadFormat: e.target.value });\n  };\n\n  selectFileToUpload = (e) => {\n    const input = document.createElement(\"input\");\n    input.type = \"file\";\n\n    input.onchange = (e) => {\n      const file = e.target.files[0];\n      //console.log('selectFileToUpload', file);\n      this.setState({ uploadFile: file });\n    };\n\n    input.click();\n  };\n\n  sendFile = (e) => {\n    const reader = new FileReader();\n    reader.readAsText(this.state.uploadFile, \"UTF-8\");\n\n    // here we tell the reader what to do when it's done reading...\n    reader.onload = (readerEvent) => {\n      const content = readerEvent.target.result; // this is the content!\n      //console.log(content);\n      this.state.websocket.ws.send(\n        JSON.stringify({ cleardb: this.state.clearDB, content: content })\n      );\n    };\n  };\n\n  clearDB = () => {\n    const clearDB = !this.state.clearDB;\n    //console.log('clearDB', clearDB);\n    this.setState({ clearDB });\n  };\n\n  render() {\n    return (\n      <div>\n        <Alerts messages={this.state.messages} />\n        <Card>\n          <Card.Header>\n            <Form.Label className=\"col-5\">Загрузка в DB</Form.Label>\n            <div className=\"col-12 text-left\">\n              Websocket status: {this.state.websocket.status}\n            </div>\n          </Card.Header>\n          <Card.Body>\n            <Row>\n              <Form.Label className=\"col-2 text-left\">Очистить DB</Form.Label>\n              <Form.Check\n                name=\"clearBD\"\n                value={this.state.clearDB}\n                onChange={this.clearDB}\n                className=\"ml-2\"\n              />\n            </Row>\n            <Row>\n              <Form.Label className=\"col-2 text-left\">\n                Файл загрузки в DB\n              </Form.Label>\n              <input\n                className=\"form-control col-3\"\n                name=\"uploadFileName\"\n                id=\"uploadFileName\"\n                type=\"text\"\n                value={this.state.uploadFile ? this.state.uploadFile.name : \"\"}\n                //onChange={this.change}\n                readOnly\n              />\n              <Button\n                variant=\"primary\"\n                className=\"\"\n                onClick={this.selectFileToUpload}\n              >\n                ...\n              </Button>\n              <Button\n                variant=\"primary\"\n                className=\"col-1 ml-2\"\n                onClick={this.sendFile}\n                disabled={this.state.uploadFile ? \"\" : \"disabled\"}\n              >\n                Старт\n              </Button>\n            </Row>\n          </Card.Body>\n        </Card>\n        <hr />\n        <Card>\n          <Card.Header>\n            <Form.Label className=\"col-5\">Выгрузка DB</Form.Label>\n          </Card.Header>\n          <Card.Body>\n            <Row>\n              <Form.Label className=\"col-3 text-left\">\n                Выберите формат сохраняемого файла\n              </Form.Label>\n              <Form.Control\n                as=\"select\"\n                className=\"col-2\"\n                onChange={this.selectFormat}\n              >\n                <option value=\"json\">json</option>\n                <option value=\"csv\">csv</option>\n                <option value=\"text\">text/plain</option>\n              </Form.Control>\n              <form action={this.getDownloadUrl()} method=\"post\">\n                <Button variant=\"primary\" type=\"submit\" className=\"col ml-4\">\n                  Старт\n                </Button>\n              </form>\n            </Row>\n          </Card.Body>\n        </Card>\n      </div>\n    );\n  }\n}\n"],"sourceRoot":""}